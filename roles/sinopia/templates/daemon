#! /bin/sh
#  /etc/init.d/sinopia

### BEGIN INIT INFO
# Provides:          sinopia
# Required-Start:    $local_fs $remote_fs $network $syslog $named
# Required-Stop:     $local_fs $remote_fs $network $syslog $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Starts the sinopia npm repository
# Description:       This file is used to start the daemon
#                    and should be placed in /etc/init.d
### END INIT INFO

APP_NAME="sinopia"
DAEMON="`which sinopia`"
DAEMON_ARGS="-c {{ sinopia_config }}/config.yaml"

# Read configuration variable file if it is present
[ -r /etc/default/$APP_NAME ] && . /etc/default/$APP_NAME
[ -x "$DAEMON" ] || exit 0
. /lib/init/vars.sh
. /lib/lsb/init-functions
VERBOSE=yes

APP_DESC="NPM - Server"
# Config, can be altered
APP_PID="/var/run/$APP_NAME.pid"
APP_PATH="/opt/$APP_NAME"


do_start() {
    start-stop-daemon \
        --start \
        --quiet \
        --user {{ sinopia_user }} \
        --pidfile $APP_PID \
        --make-pidfile \
        --chuid {{ sinopia_user }} \
        --exec $DAEMON \
        --test > /dev/null \
        || return 1
    start-stop-daemon \
        --start \
        --background \
        --user {{ sinopia_user }} \
        --pidfile $APP_PID \
        --make-pidfile \
        --chuid {{ sinopia_user }} \
        --exec $DAEMON \
        -- $DAEMON_ARGS \
        || return 2
}

do_stop() {
    start-stop-daemon \
        --stop \
        --quiet \
        --retry=TERM/30/KILL/5 \
        --pidfile $APP_PID
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    start-stop-daemon \
        --stop \
        --quiet \
        --oknodo \
        --retry=0/30/KILL/5 \
        --pidfile $APP_PID
    [ "$?" = 2 ] && return 2
    rm -f $APP_PID
    return "$RETVAL"
}

do_reload() {
    start-stop-daemon --stop --signal 1 --quiet --pidfile $APP_PID --name $APP_NAME
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $APP_DESC" "$APP_NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $APP_DESC" "$APP_NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$APP_NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    log_daemon_msg "Restarting $APP_DESC" "$APP_NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $APP_NAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac
exit 0
